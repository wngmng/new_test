// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zhifou.proto
#ifndef GRPC_zhifou_2eproto__INCLUDED
#define GRPC_zhifou_2eproto__INCLUDED

#include "zhifou.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace personalinfo {

class PersonalInfo final {
 public:
  static constexpr char const* service_full_name() {
    return "personalinfo.PersonalInfo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取我的提问
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Question>> GetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Question>>(GetMyQuestionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>> AsyncGetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>>(AsyncGetMyQuestionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>> PrepareAsyncGetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>>(PrepareAsyncGetMyQuestionRaw(context, request, cq));
    }
    // 获取我的回答
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Answer>> GetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Answer>>(GetMyAnswerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>> AsyncGetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>>(AsyncGetMyAnswerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>> PrepareAsyncGetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>>(PrepareAsyncGetMyAnswerRaw(context, request, cq));
    }
    // 获取我的文章
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Article>> GetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Article>>(GetMyArticleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>> AsyncGetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>>(AsyncGetMyArticleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>> PrepareAsyncGetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>>(PrepareAsyncGetMyArticleRaw(context, request, cq));
    }
    // 获取我的粉丝
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Fans>> GetFans(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Fans>>(GetFansRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>> AsyncGetFans(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>>(AsyncGetFansRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>> PrepareAsyncGetFans(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>>(PrepareAsyncGetFansRaw(context, request, cq));
    }
    // 获取我关注的人
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Followings>> GetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Followings>>(GetFollowingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>> AsyncGetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>>(AsyncGetFollowingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>> PrepareAsyncGetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>>(PrepareAsyncGetFollowingRaw(context, request, cq));
    }
    // 获取关注的问题
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Question>> GetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Question>>(GetFavoriteQuestionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>> AsyncGetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>>(AsyncGetFavoriteQuestionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>> PrepareAsyncGetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>>(PrepareAsyncGetFavoriteQuestionRaw(context, request, cq));
    }
    // 获取我收藏的文章
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Article>> GetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Article>>(GetCollectArticleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>> AsyncGetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>>(AsyncGetCollectArticleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>> PrepareAsyncGetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>>(PrepareAsyncGetCollectArticleRaw(context, request, cq));
    }
    // 获取我收藏的回答
    std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Answer>> GetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::personalinfo::Answer>>(GetCollectAnswerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>> AsyncGetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>>(AsyncGetCollectAnswerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>> PrepareAsyncGetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>>(PrepareAsyncGetCollectAnswerRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取我的提问
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMyQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Question>* reactor) = 0;
      #else
      virtual void GetMyQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) = 0;
      #endif
      // 获取我的回答
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMyAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Answer>* reactor) = 0;
      #else
      virtual void GetMyAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) = 0;
      #endif
      // 获取我的文章
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMyArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Article>* reactor) = 0;
      #else
      virtual void GetMyArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) = 0;
      #endif
      // 获取我的粉丝
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFans(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Fans>* reactor) = 0;
      #else
      virtual void GetFans(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Fans>* reactor) = 0;
      #endif
      // 获取我关注的人
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFollowing(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Followings>* reactor) = 0;
      #else
      virtual void GetFollowing(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Followings>* reactor) = 0;
      #endif
      // 获取关注的问题
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFavoriteQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Question>* reactor) = 0;
      #else
      virtual void GetFavoriteQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) = 0;
      #endif
      // 获取我收藏的文章
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollectArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Article>* reactor) = 0;
      #else
      virtual void GetCollectArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) = 0;
      #endif
      // 获取我收藏的回答
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollectAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Answer>* reactor) = 0;
      #else
      virtual void GetCollectAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Question>* GetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>* AsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>* PrepareAsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Answer>* GetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>* AsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>* PrepareAsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Article>* GetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>* AsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>* PrepareAsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Fans>* GetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>* AsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Fans>* PrepareAsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Followings>* GetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>* AsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Followings>* PrepareAsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Question>* GetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>* AsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Question>* PrepareAsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Article>* GetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>* AsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Article>* PrepareAsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::personalinfo::Answer>* GetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>* AsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::personalinfo::Answer>* PrepareAsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Question>> GetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Question>>(GetMyQuestionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>> AsyncGetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>>(AsyncGetMyQuestionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>> PrepareAsyncGetMyQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>>(PrepareAsyncGetMyQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Answer>> GetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Answer>>(GetMyAnswerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>> AsyncGetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>>(AsyncGetMyAnswerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>> PrepareAsyncGetMyAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>>(PrepareAsyncGetMyAnswerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Article>> GetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Article>>(GetMyArticleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>> AsyncGetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>>(AsyncGetMyArticleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>> PrepareAsyncGetMyArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>>(PrepareAsyncGetMyArticleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Fans>> GetFans(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Fans>>(GetFansRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Fans>> AsyncGetFans(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Fans>>(AsyncGetFansRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Fans>> PrepareAsyncGetFans(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Fans>>(PrepareAsyncGetFansRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Followings>> GetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Followings>>(GetFollowingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Followings>> AsyncGetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Followings>>(AsyncGetFollowingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Followings>> PrepareAsyncGetFollowing(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Followings>>(PrepareAsyncGetFollowingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Question>> GetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Question>>(GetFavoriteQuestionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>> AsyncGetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>>(AsyncGetFavoriteQuestionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>> PrepareAsyncGetFavoriteQuestion(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Question>>(PrepareAsyncGetFavoriteQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Article>> GetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Article>>(GetCollectArticleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>> AsyncGetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>>(AsyncGetCollectArticleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>> PrepareAsyncGetCollectArticle(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Article>>(PrepareAsyncGetCollectArticleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Answer>> GetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::personalinfo::Answer>>(GetCollectAnswerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>> AsyncGetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>>(AsyncGetCollectAnswerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>> PrepareAsyncGetCollectAnswer(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::personalinfo::Answer>>(PrepareAsyncGetCollectAnswerRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMyQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Question>* reactor) override;
      #else
      void GetMyQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMyAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Answer>* reactor) override;
      #else
      void GetMyAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMyArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Article>* reactor) override;
      #else
      void GetMyArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFans(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Fans>* reactor) override;
      #else
      void GetFans(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Fans>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFollowing(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Followings>* reactor) override;
      #else
      void GetFollowing(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Followings>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFavoriteQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Question>* reactor) override;
      #else
      void GetFavoriteQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollectArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Article>* reactor) override;
      #else
      void GetCollectArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollectAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::ClientReadReactor< ::personalinfo::Answer>* reactor) override;
      #else
      void GetCollectAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::personalinfo::Question>* GetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Question>* AsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Question>* PrepareAsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Answer>* GetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Answer>* AsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Answer>* PrepareAsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Article>* GetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Article>* AsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Article>* PrepareAsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Fans>* GetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Fans>* AsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Fans>* PrepareAsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Followings>* GetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Followings>* AsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Followings>* PrepareAsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Question>* GetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Question>* AsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Question>* PrepareAsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Article>* GetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Article>* AsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Article>* PrepareAsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::personalinfo::Answer>* GetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Answer>* AsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::personalinfo::Answer>* PrepareAsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMyQuestion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMyAnswer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMyArticle_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFans_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFollowing_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFavoriteQuestion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCollectArticle_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCollectAnswer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取我的提问
    virtual ::grpc::Status GetMyQuestion(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Question>* writer);
    // 获取我的回答
    virtual ::grpc::Status GetMyAnswer(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Answer>* writer);
    // 获取我的文章
    virtual ::grpc::Status GetMyArticle(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Article>* writer);
    // 获取我的粉丝
    virtual ::grpc::Status GetFans(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Fans>* writer);
    // 获取我关注的人
    virtual ::grpc::Status GetFollowing(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Followings>* writer);
    // 获取关注的问题
    virtual ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Question>* writer);
    // 获取我收藏的文章
    virtual ::grpc::Status GetCollectArticle(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Article>* writer);
    // 获取我收藏的回答
    virtual ::grpc::Status GetCollectAnswer(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Answer>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMyQuestion() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyQuestion(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Question>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMyAnswer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyAnswer(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Answer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMyArticle() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyArticle(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Article>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFans() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFans(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Fans>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFollowing() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowing(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Followings>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFavoriteQuestion() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFavoriteQuestion(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Question>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCollectArticle() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectArticle(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Article>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCollectAnswer() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectAnswer(::grpc::ServerContext* context, ::personalinfo::User* request, ::grpc::ServerAsyncWriter< ::personalinfo::Answer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMyQuestion<WithAsyncMethod_GetMyAnswer<WithAsyncMethod_GetMyArticle<WithAsyncMethod_GetFans<WithAsyncMethod_GetFollowing<WithAsyncMethod_GetFavoriteQuestion<WithAsyncMethod_GetCollectArticle<WithAsyncMethod_GetCollectAnswer<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMyQuestion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Question>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetMyQuestion(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Question>* GetMyQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Question>* GetMyQuestion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMyAnswer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Answer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetMyAnswer(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Answer>* GetMyAnswer(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Answer>* GetMyAnswer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMyArticle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Article>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetMyArticle(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Article>* GetMyArticle(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Article>* GetMyArticle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Fans>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetFans(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Fans>* GetFans(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Fans>* GetFans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFollowing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Followings>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetFollowing(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Followings>* GetFollowing(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Followings>* GetFollowing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFavoriteQuestion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Question>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetFavoriteQuestion(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Question>* GetFavoriteQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Question>* GetFavoriteQuestion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCollectArticle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Article>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetCollectArticle(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Article>* GetCollectArticle(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Article>* GetCollectArticle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCollectAnswer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::personalinfo::User, ::personalinfo::Answer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::personalinfo::User* request) { return this->GetCollectAnswer(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::personalinfo::Answer>* GetCollectAnswer(
      ::grpc::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::personalinfo::Answer>* GetCollectAnswer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::personalinfo::User* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetMyQuestion<ExperimentalWithCallbackMethod_GetMyAnswer<ExperimentalWithCallbackMethod_GetMyArticle<ExperimentalWithCallbackMethod_GetFans<ExperimentalWithCallbackMethod_GetFollowing<ExperimentalWithCallbackMethod_GetFavoriteQuestion<ExperimentalWithCallbackMethod_GetCollectArticle<ExperimentalWithCallbackMethod_GetCollectAnswer<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetMyQuestion<ExperimentalWithCallbackMethod_GetMyAnswer<ExperimentalWithCallbackMethod_GetMyArticle<ExperimentalWithCallbackMethod_GetFans<ExperimentalWithCallbackMethod_GetFollowing<ExperimentalWithCallbackMethod_GetFavoriteQuestion<ExperimentalWithCallbackMethod_GetCollectArticle<ExperimentalWithCallbackMethod_GetCollectAnswer<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMyQuestion() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMyAnswer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMyArticle() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFans() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFollowing() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFavoriteQuestion() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCollectArticle() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCollectAnswer() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMyQuestion() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyQuestion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMyAnswer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyAnswer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMyArticle() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMyArticle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFans() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFans(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFollowing() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFavoriteQuestion() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFavoriteQuestion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCollectArticle() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectArticle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCollectAnswer() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollectAnswer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMyQuestion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetMyQuestion(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyQuestion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMyAnswer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetMyAnswer(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyAnswer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyAnswer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMyArticle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetMyArticle(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyArticle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetMyArticle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFans() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetFans(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetFans(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetFans(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFollowing() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetFollowing(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetFollowing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetFollowing(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFavoriteQuestion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetFavoriteQuestion(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetFavoriteQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetFavoriteQuestion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCollectArticle() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetCollectArticle(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetCollectArticle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetCollectArticle(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCollectAnswer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetCollectAnswer(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetCollectAnswer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetCollectAnswer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMyQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetMyQuestion() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Question>(std::bind(&WithSplitStreamingMethod_GetMyQuestion<BaseClass>::StreamedGetMyQuestion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetMyQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMyQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMyQuestion(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Question>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMyAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetMyAnswer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Answer>(std::bind(&WithSplitStreamingMethod_GetMyAnswer<BaseClass>::StreamedGetMyAnswer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetMyAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMyAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMyAnswer(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Answer>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMyArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetMyArticle() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Article>(std::bind(&WithSplitStreamingMethod_GetMyArticle<BaseClass>::StreamedGetMyArticle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetMyArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMyArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMyArticle(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Article>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFans : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFans() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Fans>(std::bind(&WithSplitStreamingMethod_GetFans<BaseClass>::StreamedGetFans, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFans() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFans(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Fans>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFans(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Fans>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFollowing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFollowing() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Followings>(std::bind(&WithSplitStreamingMethod_GetFollowing<BaseClass>::StreamedGetFollowing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFollowing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFollowing(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Followings>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFollowing(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Followings>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFavoriteQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFavoriteQuestion() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Question>(std::bind(&WithSplitStreamingMethod_GetFavoriteQuestion<BaseClass>::StreamedGetFavoriteQuestion, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFavoriteQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFavoriteQuestion(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Question>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFavoriteQuestion(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Question>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetCollectArticle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetCollectArticle() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Article>(std::bind(&WithSplitStreamingMethod_GetCollectArticle<BaseClass>::StreamedGetCollectArticle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetCollectArticle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCollectArticle(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Article>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetCollectArticle(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Article>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetCollectAnswer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetCollectAnswer() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::personalinfo::User, ::personalinfo::Answer>(std::bind(&WithSplitStreamingMethod_GetCollectAnswer<BaseClass>::StreamedGetCollectAnswer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetCollectAnswer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCollectAnswer(::grpc::ServerContext* /*context*/, const ::personalinfo::User* /*request*/, ::grpc::ServerWriter< ::personalinfo::Answer>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetCollectAnswer(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::personalinfo::User,::personalinfo::Answer>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetMyQuestion<WithSplitStreamingMethod_GetMyAnswer<WithSplitStreamingMethod_GetMyArticle<WithSplitStreamingMethod_GetFans<WithSplitStreamingMethod_GetFollowing<WithSplitStreamingMethod_GetFavoriteQuestion<WithSplitStreamingMethod_GetCollectArticle<WithSplitStreamingMethod_GetCollectAnswer<Service > > > > > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetMyQuestion<WithSplitStreamingMethod_GetMyAnswer<WithSplitStreamingMethod_GetMyArticle<WithSplitStreamingMethod_GetFans<WithSplitStreamingMethod_GetFollowing<WithSplitStreamingMethod_GetFavoriteQuestion<WithSplitStreamingMethod_GetCollectArticle<WithSplitStreamingMethod_GetCollectAnswer<Service > > > > > > > > StreamedService;
};

}  // namespace personalinfo


#endif  // GRPC_zhifou_2eproto__INCLUDED
