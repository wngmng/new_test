// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zhifou.proto

#include "zhifou.pb.h"
#include "zhifou.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace personalinfo {

static const char* PersonalInfo_method_names[] = {
  "/personalinfo.PersonalInfo/GetMyQuestion",
  "/personalinfo.PersonalInfo/GetMyAnswer",
  "/personalinfo.PersonalInfo/GetMyArticle",
  "/personalinfo.PersonalInfo/GetFans",
  "/personalinfo.PersonalInfo/GetFollowing",
  "/personalinfo.PersonalInfo/GetFavoriteQuestion",
  "/personalinfo.PersonalInfo/GetCollectArticle",
  "/personalinfo.PersonalInfo/GetCollectAnswer",
};

std::unique_ptr< PersonalInfo::Stub> PersonalInfo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PersonalInfo::Stub> stub(new PersonalInfo::Stub(channel));
  return stub;
}

PersonalInfo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMyQuestion_(PersonalInfo_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMyAnswer_(PersonalInfo_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetMyArticle_(PersonalInfo_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetFans_(PersonalInfo_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetFollowing_(PersonalInfo_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetFavoriteQuestion_(PersonalInfo_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCollectArticle_(PersonalInfo_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCollectAnswer_(PersonalInfo_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::personalinfo::Question>* PersonalInfo::Stub::GetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Question>::Create(channel_.get(), rpcmethod_GetMyQuestion_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetMyQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Question>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMyQuestion_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Question>* PersonalInfo::Stub::AsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Question>::Create(channel_.get(), cq, rpcmethod_GetMyQuestion_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Question>* PersonalInfo::Stub::PrepareAsyncGetMyQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Question>::Create(channel_.get(), cq, rpcmethod_GetMyQuestion_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Answer>* PersonalInfo::Stub::GetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), rpcmethod_GetMyAnswer_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetMyAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Answer>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMyAnswer_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Answer>* PersonalInfo::Stub::AsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), cq, rpcmethod_GetMyAnswer_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Answer>* PersonalInfo::Stub::PrepareAsyncGetMyAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), cq, rpcmethod_GetMyAnswer_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Article>* PersonalInfo::Stub::GetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Article>::Create(channel_.get(), rpcmethod_GetMyArticle_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetMyArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Article>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMyArticle_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Article>* PersonalInfo::Stub::AsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Article>::Create(channel_.get(), cq, rpcmethod_GetMyArticle_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Article>* PersonalInfo::Stub::PrepareAsyncGetMyArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Article>::Create(channel_.get(), cq, rpcmethod_GetMyArticle_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Fans>* PersonalInfo::Stub::GetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Fans>::Create(channel_.get(), rpcmethod_GetFans_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetFans(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Fans>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Fans>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFans_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Fans>* PersonalInfo::Stub::AsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Fans>::Create(channel_.get(), cq, rpcmethod_GetFans_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Fans>* PersonalInfo::Stub::PrepareAsyncGetFansRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Fans>::Create(channel_.get(), cq, rpcmethod_GetFans_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Followings>* PersonalInfo::Stub::GetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Followings>::Create(channel_.get(), rpcmethod_GetFollowing_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetFollowing(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Followings>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Followings>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFollowing_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Followings>* PersonalInfo::Stub::AsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Followings>::Create(channel_.get(), cq, rpcmethod_GetFollowing_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Followings>* PersonalInfo::Stub::PrepareAsyncGetFollowingRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Followings>::Create(channel_.get(), cq, rpcmethod_GetFollowing_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Question>* PersonalInfo::Stub::GetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Question>::Create(channel_.get(), rpcmethod_GetFavoriteQuestion_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetFavoriteQuestion(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Question>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Question>::Create(stub_->channel_.get(), stub_->rpcmethod_GetFavoriteQuestion_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Question>* PersonalInfo::Stub::AsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Question>::Create(channel_.get(), cq, rpcmethod_GetFavoriteQuestion_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Question>* PersonalInfo::Stub::PrepareAsyncGetFavoriteQuestionRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Question>::Create(channel_.get(), cq, rpcmethod_GetFavoriteQuestion_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Article>* PersonalInfo::Stub::GetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Article>::Create(channel_.get(), rpcmethod_GetCollectArticle_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetCollectArticle(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Article>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Article>::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollectArticle_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Article>* PersonalInfo::Stub::AsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Article>::Create(channel_.get(), cq, rpcmethod_GetCollectArticle_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Article>* PersonalInfo::Stub::PrepareAsyncGetCollectArticleRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Article>::Create(channel_.get(), cq, rpcmethod_GetCollectArticle_, context, request, false, nullptr);
}

::grpc::ClientReader< ::personalinfo::Answer>* PersonalInfo::Stub::GetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), rpcmethod_GetCollectAnswer_, context, request);
}

void PersonalInfo::Stub::experimental_async::GetCollectAnswer(::grpc::ClientContext* context, ::personalinfo::User* request, ::grpc::experimental::ClientReadReactor< ::personalinfo::Answer>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::personalinfo::Answer>::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollectAnswer_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::personalinfo::Answer>* PersonalInfo::Stub::AsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), cq, rpcmethod_GetCollectAnswer_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::personalinfo::Answer>* PersonalInfo::Stub::PrepareAsyncGetCollectAnswerRaw(::grpc::ClientContext* context, const ::personalinfo::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::personalinfo::Answer>::Create(channel_.get(), cq, rpcmethod_GetCollectAnswer_, context, request, false, nullptr);
}

PersonalInfo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Question>(
          std::mem_fn(&PersonalInfo::Service::GetMyQuestion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Answer>(
          std::mem_fn(&PersonalInfo::Service::GetMyAnswer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Article>(
          std::mem_fn(&PersonalInfo::Service::GetMyArticle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Fans>(
          std::mem_fn(&PersonalInfo::Service::GetFans), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Followings>(
          std::mem_fn(&PersonalInfo::Service::GetFollowing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Question>(
          std::mem_fn(&PersonalInfo::Service::GetFavoriteQuestion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Article>(
          std::mem_fn(&PersonalInfo::Service::GetCollectArticle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonalInfo_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PersonalInfo::Service, ::personalinfo::User, ::personalinfo::Answer>(
          std::mem_fn(&PersonalInfo::Service::GetCollectAnswer), this)));
}

PersonalInfo::Service::~Service() {
}

::grpc::Status PersonalInfo::Service::GetMyQuestion(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Question>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetMyAnswer(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Answer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetMyArticle(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Article>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetFans(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Fans>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetFollowing(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Followings>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetFavoriteQuestion(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Question>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetCollectArticle(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Article>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonalInfo::Service::GetCollectAnswer(::grpc::ServerContext* context, const ::personalinfo::User* request, ::grpc::ServerWriter< ::personalinfo::Answer>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace personalinfo

