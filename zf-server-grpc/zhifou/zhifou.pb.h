// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zhifou.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zhifou_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zhifou_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zhifou_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zhifou_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zhifou_2eproto;
namespace personalinfo {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Article;
class ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class Fans;
class FansDefaultTypeInternal;
extern FansDefaultTypeInternal _Fans_default_instance_;
class Followings;
class FollowingsDefaultTypeInternal;
extern FollowingsDefaultTypeInternal _Followings_default_instance_;
class Question;
class QuestionDefaultTypeInternal;
extern QuestionDefaultTypeInternal _Question_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace personalinfo
PROTOBUF_NAMESPACE_OPEN
template<> ::personalinfo::Answer* Arena::CreateMaybeMessage<::personalinfo::Answer>(Arena*);
template<> ::personalinfo::Article* Arena::CreateMaybeMessage<::personalinfo::Article>(Arena*);
template<> ::personalinfo::Fans* Arena::CreateMaybeMessage<::personalinfo::Fans>(Arena*);
template<> ::personalinfo::Followings* Arena::CreateMaybeMessage<::personalinfo::Followings>(Arena*);
template<> ::personalinfo::Question* Arena::CreateMaybeMessage<::personalinfo::Question>(Arena*);
template<> ::personalinfo::User* Arena::CreateMaybeMessage<::personalinfo::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace personalinfo {

// ===================================================================

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// -------------------------------------------------------------------

class Article :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.Article) */ {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  inline Article& operator=(Article&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Article& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }
  inline void Swap(Article* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Article* New() const final {
    return CreateMaybeMessage<Article>(nullptr);
  }

  Article* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Article>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Article* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.Article";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTitleFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string createTime = 4;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.Article)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// -------------------------------------------------------------------

class Question :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.Question) */ {
 public:
  Question();
  virtual ~Question();

  Question(const Question& from);
  Question(Question&& from) noexcept
    : Question() {
    *this = ::std::move(from);
  }

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }
  inline Question& operator=(Question&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Question& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Question* internal_default_instance() {
    return reinterpret_cast<const Question*>(
               &_Question_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Question& a, Question& b) {
    a.Swap(&b);
  }
  inline void Swap(Question* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Question* New() const final {
    return CreateMaybeMessage<Question>(nullptr);
  }

  Question* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Question>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Question& from);
  void MergeFrom(const Question& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Question* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.Question";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTitleFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string createTime = 4;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.Question)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// -------------------------------------------------------------------

class Answer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const final {
    return CreateMaybeMessage<Answer>(nullptr);
  }

  Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.Answer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerIdFieldNumber = 1,
    kQuestionIdFieldNumber = 2,
    kQuestionTitleFieldNumber = 3,
    kUsernameFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
  };
  // string answerId = 1;
  void clear_answerid();
  const std::string& answerid() const;
  void set_answerid(const std::string& value);
  void set_answerid(std::string&& value);
  void set_answerid(const char* value);
  void set_answerid(const char* value, size_t size);
  std::string* mutable_answerid();
  std::string* release_answerid();
  void set_allocated_answerid(std::string* answerid);
  private:
  const std::string& _internal_answerid() const;
  void _internal_set_answerid(const std::string& value);
  std::string* _internal_mutable_answerid();
  public:

  // string questionId = 2;
  void clear_questionid();
  const std::string& questionid() const;
  void set_questionid(const std::string& value);
  void set_questionid(std::string&& value);
  void set_questionid(const char* value);
  void set_questionid(const char* value, size_t size);
  std::string* mutable_questionid();
  std::string* release_questionid();
  void set_allocated_questionid(std::string* questionid);
  private:
  const std::string& _internal_questionid() const;
  void _internal_set_questionid(const std::string& value);
  std::string* _internal_mutable_questionid();
  public:

  // string questionTitle = 3;
  void clear_questiontitle();
  const std::string& questiontitle() const;
  void set_questiontitle(const std::string& value);
  void set_questiontitle(std::string&& value);
  void set_questiontitle(const char* value);
  void set_questiontitle(const char* value, size_t size);
  std::string* mutable_questiontitle();
  std::string* release_questiontitle();
  void set_allocated_questiontitle(std::string* questiontitle);
  private:
  const std::string& _internal_questiontitle() const;
  void _internal_set_questiontitle(const std::string& value);
  std::string* _internal_mutable_questiontitle();
  public:

  // string username = 4;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string createTime = 5;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.Answer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr questionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr questiontitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// -------------------------------------------------------------------

class Fans :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.Fans) */ {
 public:
  Fans();
  virtual ~Fans();

  Fans(const Fans& from);
  Fans(Fans&& from) noexcept
    : Fans() {
    *this = ::std::move(from);
  }

  inline Fans& operator=(const Fans& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fans& operator=(Fans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fans* internal_default_instance() {
    return reinterpret_cast<const Fans*>(
               &_Fans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fans& a, Fans& b) {
    a.Swap(&b);
  }
  inline void Swap(Fans* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fans* New() const final {
    return CreateMaybeMessage<Fans>(nullptr);
  }

  Fans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fans& from);
  void MergeFrom(const Fans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.Fans";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kUsernameFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.Fans)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// -------------------------------------------------------------------

class Followings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personalinfo.Followings) */ {
 public:
  Followings();
  virtual ~Followings();

  Followings(const Followings& from);
  Followings(Followings&& from) noexcept
    : Followings() {
    *this = ::std::move(from);
  }

  inline Followings& operator=(const Followings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Followings& operator=(Followings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Followings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Followings* internal_default_instance() {
    return reinterpret_cast<const Followings*>(
               &_Followings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Followings& a, Followings& b) {
    a.Swap(&b);
  }
  inline void Swap(Followings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Followings* New() const final {
    return CreateMaybeMessage<Followings>(nullptr);
  }

  Followings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Followings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Followings& from);
  void MergeFrom(const Followings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Followings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personalinfo.Followings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zhifou_2eproto);
    return ::descriptor_table_zhifou_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kUsernameFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:personalinfo.Followings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zhifou_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string userId = 1;
inline void User::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::userid() const {
  // @@protoc_insertion_point(field_get:personalinfo.User.userId)
  return _internal_userid();
}
inline void User::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:personalinfo.User.userId)
}
inline std::string* User::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.User.userId)
  return _internal_mutable_userid();
}
inline const std::string& User::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void User::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.User.userId)
}
inline void User::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.User.userId)
}
inline void User::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.User.userId)
}
inline std::string* User::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_userid() {
  // @@protoc_insertion_point(field_release:personalinfo.User.userId)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.User.userId)
}

// -------------------------------------------------------------------

// Article

// string uuid = 1;
inline void Article::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Article::uuid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Article.uuid)
  return _internal_uuid();
}
inline void Article::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Article.uuid)
}
inline std::string* Article::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Article.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Article::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Article::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Article::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Article.uuid)
}
inline void Article::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Article.uuid)
}
inline void Article::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Article.uuid)
}
inline std::string* Article::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Article::release_uuid() {
  // @@protoc_insertion_point(field_release:personalinfo.Article.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Article.uuid)
}

// string title = 2;
inline void Article::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Article::title() const {
  // @@protoc_insertion_point(field_get:personalinfo.Article.title)
  return _internal_title();
}
inline void Article::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:personalinfo.Article.title)
}
inline std::string* Article::mutable_title() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Article.title)
  return _internal_mutable_title();
}
inline const std::string& Article::_internal_title() const {
  return title_.GetNoArena();
}
inline void Article::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Article::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Article.title)
}
inline void Article::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Article.title)
}
inline void Article::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Article.title)
}
inline std::string* Article::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Article::release_title() {
  // @@protoc_insertion_point(field_release:personalinfo.Article.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Article.title)
}

// string username = 3;
inline void Article::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Article::username() const {
  // @@protoc_insertion_point(field_get:personalinfo.Article.username)
  return _internal_username();
}
inline void Article::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:personalinfo.Article.username)
}
inline std::string* Article::mutable_username() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Article.username)
  return _internal_mutable_username();
}
inline const std::string& Article::_internal_username() const {
  return username_.GetNoArena();
}
inline void Article::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Article::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Article.username)
}
inline void Article::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Article.username)
}
inline void Article::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Article.username)
}
inline std::string* Article::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Article::release_username() {
  // @@protoc_insertion_point(field_release:personalinfo.Article.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Article.username)
}

// string createTime = 4;
inline void Article::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Article::createtime() const {
  // @@protoc_insertion_point(field_get:personalinfo.Article.createTime)
  return _internal_createtime();
}
inline void Article::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:personalinfo.Article.createTime)
}
inline std::string* Article::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Article.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& Article::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void Article::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Article::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Article.createTime)
}
inline void Article::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Article.createTime)
}
inline void Article::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Article.createTime)
}
inline std::string* Article::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Article::release_createtime() {
  // @@protoc_insertion_point(field_release:personalinfo.Article.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Article.createTime)
}

// -------------------------------------------------------------------

// Question

// string uuid = 1;
inline void Question::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Question::uuid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Question.uuid)
  return _internal_uuid();
}
inline void Question::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Question.uuid)
}
inline std::string* Question::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Question.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Question::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Question::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Question::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Question.uuid)
}
inline void Question::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Question.uuid)
}
inline void Question::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Question.uuid)
}
inline std::string* Question::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Question::release_uuid() {
  // @@protoc_insertion_point(field_release:personalinfo.Question.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Question.uuid)
}

// string title = 2;
inline void Question::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Question::title() const {
  // @@protoc_insertion_point(field_get:personalinfo.Question.title)
  return _internal_title();
}
inline void Question::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:personalinfo.Question.title)
}
inline std::string* Question::mutable_title() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Question.title)
  return _internal_mutable_title();
}
inline const std::string& Question::_internal_title() const {
  return title_.GetNoArena();
}
inline void Question::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Question::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Question.title)
}
inline void Question::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Question.title)
}
inline void Question::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Question.title)
}
inline std::string* Question::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Question::release_title() {
  // @@protoc_insertion_point(field_release:personalinfo.Question.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Question.title)
}

// string username = 3;
inline void Question::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Question::username() const {
  // @@protoc_insertion_point(field_get:personalinfo.Question.username)
  return _internal_username();
}
inline void Question::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:personalinfo.Question.username)
}
inline std::string* Question::mutable_username() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Question.username)
  return _internal_mutable_username();
}
inline const std::string& Question::_internal_username() const {
  return username_.GetNoArena();
}
inline void Question::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Question::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Question.username)
}
inline void Question::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Question.username)
}
inline void Question::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Question.username)
}
inline std::string* Question::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Question::release_username() {
  // @@protoc_insertion_point(field_release:personalinfo.Question.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Question.username)
}

// string createTime = 4;
inline void Question::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Question::createtime() const {
  // @@protoc_insertion_point(field_get:personalinfo.Question.createTime)
  return _internal_createtime();
}
inline void Question::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:personalinfo.Question.createTime)
}
inline std::string* Question::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Question.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& Question::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void Question::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Question::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Question.createTime)
}
inline void Question::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Question.createTime)
}
inline void Question::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Question.createTime)
}
inline std::string* Question::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Question::release_createtime() {
  // @@protoc_insertion_point(field_release:personalinfo.Question.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Question::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Question.createTime)
}

// -------------------------------------------------------------------

// Answer

// string answerId = 1;
inline void Answer::clear_answerid() {
  answerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Answer::answerid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Answer.answerId)
  return _internal_answerid();
}
inline void Answer::set_answerid(const std::string& value) {
  _internal_set_answerid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Answer.answerId)
}
inline std::string* Answer::mutable_answerid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Answer.answerId)
  return _internal_mutable_answerid();
}
inline const std::string& Answer::_internal_answerid() const {
  return answerid_.GetNoArena();
}
inline void Answer::_internal_set_answerid(const std::string& value) {
  
  answerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Answer::set_answerid(std::string&& value) {
  
  answerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Answer.answerId)
}
inline void Answer::set_answerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Answer.answerId)
}
inline void Answer::set_answerid(const char* value, size_t size) {
  
  answerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Answer.answerId)
}
inline std::string* Answer::_internal_mutable_answerid() {
  
  return answerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Answer::release_answerid() {
  // @@protoc_insertion_point(field_release:personalinfo.Answer.answerId)
  
  return answerid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_answerid(std::string* answerid) {
  if (answerid != nullptr) {
    
  } else {
    
  }
  answerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answerid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Answer.answerId)
}

// string questionId = 2;
inline void Answer::clear_questionid() {
  questionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Answer::questionid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Answer.questionId)
  return _internal_questionid();
}
inline void Answer::set_questionid(const std::string& value) {
  _internal_set_questionid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Answer.questionId)
}
inline std::string* Answer::mutable_questionid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Answer.questionId)
  return _internal_mutable_questionid();
}
inline const std::string& Answer::_internal_questionid() const {
  return questionid_.GetNoArena();
}
inline void Answer::_internal_set_questionid(const std::string& value) {
  
  questionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Answer::set_questionid(std::string&& value) {
  
  questionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Answer.questionId)
}
inline void Answer::set_questionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  questionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Answer.questionId)
}
inline void Answer::set_questionid(const char* value, size_t size) {
  
  questionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Answer.questionId)
}
inline std::string* Answer::_internal_mutable_questionid() {
  
  return questionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Answer::release_questionid() {
  // @@protoc_insertion_point(field_release:personalinfo.Answer.questionId)
  
  return questionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_questionid(std::string* questionid) {
  if (questionid != nullptr) {
    
  } else {
    
  }
  questionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), questionid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Answer.questionId)
}

// string questionTitle = 3;
inline void Answer::clear_questiontitle() {
  questiontitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Answer::questiontitle() const {
  // @@protoc_insertion_point(field_get:personalinfo.Answer.questionTitle)
  return _internal_questiontitle();
}
inline void Answer::set_questiontitle(const std::string& value) {
  _internal_set_questiontitle(value);
  // @@protoc_insertion_point(field_set:personalinfo.Answer.questionTitle)
}
inline std::string* Answer::mutable_questiontitle() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Answer.questionTitle)
  return _internal_mutable_questiontitle();
}
inline const std::string& Answer::_internal_questiontitle() const {
  return questiontitle_.GetNoArena();
}
inline void Answer::_internal_set_questiontitle(const std::string& value) {
  
  questiontitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Answer::set_questiontitle(std::string&& value) {
  
  questiontitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Answer.questionTitle)
}
inline void Answer::set_questiontitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  questiontitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Answer.questionTitle)
}
inline void Answer::set_questiontitle(const char* value, size_t size) {
  
  questiontitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Answer.questionTitle)
}
inline std::string* Answer::_internal_mutable_questiontitle() {
  
  return questiontitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Answer::release_questiontitle() {
  // @@protoc_insertion_point(field_release:personalinfo.Answer.questionTitle)
  
  return questiontitle_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_questiontitle(std::string* questiontitle) {
  if (questiontitle != nullptr) {
    
  } else {
    
  }
  questiontitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), questiontitle);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Answer.questionTitle)
}

// string username = 4;
inline void Answer::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Answer::username() const {
  // @@protoc_insertion_point(field_get:personalinfo.Answer.username)
  return _internal_username();
}
inline void Answer::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:personalinfo.Answer.username)
}
inline std::string* Answer::mutable_username() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Answer.username)
  return _internal_mutable_username();
}
inline const std::string& Answer::_internal_username() const {
  return username_.GetNoArena();
}
inline void Answer::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Answer::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Answer.username)
}
inline void Answer::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Answer.username)
}
inline void Answer::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Answer.username)
}
inline std::string* Answer::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Answer::release_username() {
  // @@protoc_insertion_point(field_release:personalinfo.Answer.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Answer.username)
}

// string createTime = 5;
inline void Answer::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Answer::createtime() const {
  // @@protoc_insertion_point(field_get:personalinfo.Answer.createTime)
  return _internal_createtime();
}
inline void Answer::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:personalinfo.Answer.createTime)
}
inline std::string* Answer::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Answer.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& Answer::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void Answer::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Answer::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Answer.createTime)
}
inline void Answer::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Answer.createTime)
}
inline void Answer::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Answer.createTime)
}
inline std::string* Answer::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Answer::release_createtime() {
  // @@protoc_insertion_point(field_release:personalinfo.Answer.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Answer.createTime)
}

// -------------------------------------------------------------------

// Fans

// string uuid = 1;
inline void Fans::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fans::uuid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Fans.uuid)
  return _internal_uuid();
}
inline void Fans::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Fans.uuid)
}
inline std::string* Fans::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Fans.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Fans::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Fans::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fans::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Fans.uuid)
}
inline void Fans::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Fans.uuid)
}
inline void Fans::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Fans.uuid)
}
inline std::string* Fans::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fans::release_uuid() {
  // @@protoc_insertion_point(field_release:personalinfo.Fans.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fans::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Fans.uuid)
}

// string username = 2;
inline void Fans::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Fans::username() const {
  // @@protoc_insertion_point(field_get:personalinfo.Fans.username)
  return _internal_username();
}
inline void Fans::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:personalinfo.Fans.username)
}
inline std::string* Fans::mutable_username() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Fans.username)
  return _internal_mutable_username();
}
inline const std::string& Fans::_internal_username() const {
  return username_.GetNoArena();
}
inline void Fans::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Fans::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Fans.username)
}
inline void Fans::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Fans.username)
}
inline void Fans::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Fans.username)
}
inline std::string* Fans::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Fans::release_username() {
  // @@protoc_insertion_point(field_release:personalinfo.Fans.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Fans::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Fans.username)
}

// -------------------------------------------------------------------

// Followings

// string uuid = 1;
inline void Followings::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Followings::uuid() const {
  // @@protoc_insertion_point(field_get:personalinfo.Followings.uuid)
  return _internal_uuid();
}
inline void Followings::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:personalinfo.Followings.uuid)
}
inline std::string* Followings::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Followings.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Followings::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Followings::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Followings::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Followings.uuid)
}
inline void Followings::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Followings.uuid)
}
inline void Followings::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Followings.uuid)
}
inline std::string* Followings::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Followings::release_uuid() {
  // @@protoc_insertion_point(field_release:personalinfo.Followings.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Followings::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Followings.uuid)
}

// string username = 2;
inline void Followings::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Followings::username() const {
  // @@protoc_insertion_point(field_get:personalinfo.Followings.username)
  return _internal_username();
}
inline void Followings::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:personalinfo.Followings.username)
}
inline std::string* Followings::mutable_username() {
  // @@protoc_insertion_point(field_mutable:personalinfo.Followings.username)
  return _internal_mutable_username();
}
inline const std::string& Followings::_internal_username() const {
  return username_.GetNoArena();
}
inline void Followings::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Followings::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:personalinfo.Followings.username)
}
inline void Followings::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:personalinfo.Followings.username)
}
inline void Followings::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:personalinfo.Followings.username)
}
inline std::string* Followings::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Followings::release_username() {
  // @@protoc_insertion_point(field_release:personalinfo.Followings.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Followings::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:personalinfo.Followings.username)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace personalinfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zhifou_2eproto
